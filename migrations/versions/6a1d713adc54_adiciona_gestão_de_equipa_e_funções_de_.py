"""Adiciona gestão de equipa e funções de utilizador

Revision ID: 6a1d713adc54
Revises: ... (o seu ID de revisão anterior)
Create Date: ...

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '6a1d713adc54'
down_revision = '...' # O seu ID de revisão anterior
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        # Passo 1: Adiciona a coluna permitindo valores nulos temporariamente
        batch_op.add_column(sa.Column('role', sa.String(length=50), nullable=True))
        batch_op.add_column(sa.Column('date_of_birth', sa.Date(), nullable=True))
        batch_op.add_column(sa.Column('address', sa.String(length=255), nullable=True))
        batch_op.add_column(sa.Column('cpf', sa.String(length=20), nullable=True))
        batch_op.add_column(sa.Column('crefito', sa.String(length=20), nullable=True))
        batch_op.add_column(sa.Column('phone', sa.String(length=20), nullable=True))

    # Passo 2: Preenche a nova coluna 'role' com um valor padrão para todos os utilizadores existentes
    op.execute("UPDATE \"user\" SET role = 'admin' WHERE role IS NULL")

    # Passo 3: Agora que não há mais nulos, altera a coluna para não permitir nulos
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.alter_column('role', existing_type=sa.String(length=50), nullable=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.drop_column('phone')
        batch_op.drop_column('crefito')
        batch_op.drop_column('cpf')
        batch_op.drop_column('address')
        batch_op.drop_column('date_of_birth')
        batch_op.drop_column('role')

    # ### end Alembic commands ###
